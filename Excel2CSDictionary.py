# encoding: utf8

# =========================================================================
#
#    Excel2CSDictionary.py
#    Copyright(c) R-Koubou
#    https://github.com/r-koubou/Excel2CSDictionary
#
# =========================================================================

import sys
import os.path

# http://pypi.python.org/pypi/xlrd
import xlrd

# Sourcecode template
CS_BODY_TEMPLATE = """//
// Generated by Excel2CSDictionary.py
//
#pragma warning disable 0219
#pragma warning disable 0414

using System.Collections.Generic;

namespace %(namespace)s
{
    public class %(className)s
    {

%(properties)s
        /**
         * Ctor.
         */
        public %(className)s()
        {
%(initializer)s
        }

        /**
         * Convbert to Dictionary instanse
         */
        public Dictionary<string, object> ToDictionary()
        {
            Dictionary<string, object> dictionary = new Dictionary<string, object>( 64 );
%(toDictionary)s
            return dictionary;
        }

        /**
         * Convbert from Dictionary instanse
         */
        static public %(className)s CreateFromDictionary( Dictionary<string, object> dictionary )
        {
            %(className)s ret = new %(className)s();
%(fromDictionary)s
            return ret;
        }
    }
}
"""

# Set a propertiy's default value on ctor.
CS_INITIALIZER_TEMPLATE = "            %(name)s = %(value)s;\n"

# Per property template
CS_PROPERTY_TEMPLATE = """        /**
         * %(description)s
         */
        public %(type)s %(name)s
        {
            set;
            get;
        }

"""

# Property from dictionary convertion code
CS_TO_DICT_TEMPLATE = "            dictionary[ \"%(key)s\" ] = %(name)s;\n"

# Property from dictionary convertion code
DICT_TO_PROPERTY_TEMPLATE = "            ret.%(name)s = dictionary[ \"%(key)s\" ];\n"

"""
Get a Cell from given sheet instanse and row index and cell string value of Row 1.
"""
def getCellFromColmnName( sheet, rowIndex, colmnName ):

    colmnName = colmnName

    for c in range( sheet.ncols ):
        cell = sheet.cell( 0, c )
        name = cell.value
        if( name == colmnName ):
            return sheet.cell( rowIndex, c )

    return ""

"""
Generate from sheet
"""
def Generate( sheet, nameSpace, outputDir ):

    error     = False
    className = sheet.name

    rowLength = sheet.nrows

    initializerCode             = ""
    propertiesCode              = ""
    propertyToDictionaryCode    = ""
    dictionaryToPropertiesCode  = ""

    print( "Generating.... %s.cs" % ( className ) )

    for row in range( 1, rowLength ):
        name     = str( getCellFromColmnName( sheet, row, "Name" ).value ).strip()
        keyName  = str( getCellFromColmnName( sheet, row, "Dictionary Key" ).value ).strip()
        dataType = str( getCellFromColmnName( sheet, row, "Type" ).value ).strip()
        desc     = getCellFromColmnName( sheet, row, "Description" ).value.strip()
        value    = getCellFromColmnName( sheet, row, "Default Value" ).value

        if( dataType == "string" and isinstance( value, unicode ) == False ):
            error = True
            print( "Row %d: %s is not string value!" % ( row + 1, name ) )
            break

        if( ( dataType == "byte" or dataType == "short" or dataType == "int" or dataType == "long" ) and isinstance( value, float ) ):
            value = int( value )


        initializerCode += CS_INITIALIZER_TEMPLATE % {
            "name":         name,
            "value":        value,
        }

        propertiesCode += CS_PROPERTY_TEMPLATE % {
            "name":         name,
            "type":         dataType,
            "description":  desc,
        }

        if( len( keyName ) > 0 ):
            propertyToDictionaryCode += CS_TO_DICT_TEMPLATE % {
                "name":         name,
                "key":          keyName,
            }
            dictionaryToPropertiesCode += DICT_TO_PROPERTY_TEMPLATE % {
                "name":         name,
                "key":          keyName,
            }

    if( error == True ):
        return

    fp = open( os.path.join( outputDir, className + ".cs" ), "wb" )
    fp.write( CS_BODY_TEMPLATE % {
        "namespace":        nameSpace.encode( "utf-8" ),
        "className":        className.encode( "utf-8" ),
        "properties":       propertiesCode.encode( "utf-8" ),
        "initializer":      initializerCode.encode( "utf-8" ),
        "toDictionary":     propertyToDictionaryCode.encode( "utf-8" ),
        "fromDictionary":   dictionaryToPropertiesCode.encode( "utf-8" ),
    })
    fp.close()


"""
Main Program
"""
def Main( argv ):
    nameSpace   = argv[ 1 ]
    book        = xlrd.open_workbook( argv[ 2 ] )
    outputDir   = argv[ 3 ]
    sheet       = book.sheet_by_index( 0 )

    for s in book.sheets():
        Generate( s, nameSpace, outputDir )

if __name__ == '__main__':
    if( len( sys.argv ) >= 4 ):
        Main( sys.argv )
    else:
        usage = [
            "",
            "usage:",
            "    python Excel2CSDictionary.py <namespace> <xlsx filename> <output-dir>",
            "",
            "e.g.",
            "    python Excel2CSDictionary.py com.example MyData.xlsx ./",
            "",
        ]
        for i in usage :
            print( i )
